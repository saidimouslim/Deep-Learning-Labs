import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
(X_train, y_train), (X_test, y_test) = cifar10.load_data()
X_train.shape
y_train.shape
# Convert data type to float32 for normalization
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

# Normalize by dividing each pixel by 255 (assuming pixel values are in the range [0, 255])
X_train /= 255.0
X_test /= 255.0
from tensorflow.keras.utils import to_categorical
y_train = to_categorical(y_train, num_classes=10)  # One-hot encode the labels
y_val = to_categorical(y_val, num_classes=10)
from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)
y_test[9999]
import matplotlib.pyplot as plt

# Select an image index (e.g., 0 for the first image)
image_index = 1

# Reshape the image to 32x32x3 (width, height, color channels)
image = X_train[39999].reshape(32, 32, 3)

plt.imshow(image)
plt.show()
# Define the model
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.layers import Flatten
from tensorflow.keras.optimizers import SGD
model = Sequential([
  Flatten(input_shape=(32, 32, 3)),  # Input shape for CIFAR-10 images
  Dense(128, activation='relu'),
  Dense(64, activation='relu'),
  Dense(num_classes, activation='softmax')
])

# Compile the model
model.compile(optimizer=SGD(learning_rate=0.01),
              loss='categorical_crossentropy',
              metrics=['accuracy'])
# Train the model using Mini-batch SGD
history = model.fit(X_train, y_train, batch_size=128, epochs=50, validation_data=(X_val, y_val))

# Plot learning curves
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()





